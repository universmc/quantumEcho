Bien s√ªr, voici maintenant le code HTML pour afficher dynamiquement le contenu du fichier JSON :

index.html:
```html
<!DOCTYPE html>
<html>
<head>
  <title>Page d'index</title>
  <style>
    #content {
      margin: 0 auto;
      width: 50%;
    }
  </style>
</head>
<body>
  <div id="content"></div>
  <script>
    fetch('data.json')
      .then(response => response.json())
      .then(data => {
        const content = document.getElementById('content');
        const h1 = document.createElement('h1');
        h1.textContent = data.title;
        content.appendChild(h1);
        const p = document.createElement('p');
        p.textContent = data.description;
        content.appendChild(p);
      })
      .catch(error => console.error(error));
  </script>
</body>
</html>
```
Et voici le code CSS pour styliser la page :

index.css:
```css
body {
  font-family: Arial, sans-serif;
  background-color: #f2f2f2;
}

#content {
  padding: 20px;
  background-color: white;
  border-radius: 5px;
  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
  margin-top: 50px;
}

h1 {
  font-size: 32px;
  margin-bottom: 20px;
}

p {
  font-size: 18px;
  line-height: 1.5;
}
```
Et enfin, voici le code JavaScript pour afficher dynamiquement le contenu du fichier JSON :

index.js:
```javascript
fetch('data.json')
  .then(response => response.json())
  .then(data => {
    const content = document.getElementById('content');
    const h1 = document.createElement('h1');
    h1.textContent = data.title;
    content.appendChild(h1);
    const p = document.createElement('p');
    p.textContent = data.description;
    content.appendChild(p);
  })
  .catch(error => console.error(error));
```
Vous pouvez combiner ces trois fichiers dans un seul fichier HTML pour une utilisation plus simple. Dans ce cas, placez le contenu du fichier JSON entre les balises `<script id="data" type="application/json">` et `</script>` dans la section `<head>` ou `<body>` de l'HTML.